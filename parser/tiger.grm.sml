functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
structure A = Absyn
open Symbol


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\186\000\005\000\186\000\007\000\186\000\009\000\186\000\
\\011\000\186\000\013\000\186\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\020\000\037\000\021\000\036\000\
\\022\000\035\000\023\000\034\000\024\000\033\000\025\000\032\000\
\\027\000\186\000\031\000\186\000\032\000\186\000\035\000\186\000\
\\036\000\186\000\038\000\186\000\039\000\186\000\043\000\186\000\
\\044\000\186\000\045\000\186\000\000\000\
\\001\000\001\000\187\000\005\000\187\000\007\000\187\000\009\000\187\000\
\\011\000\187\000\013\000\187\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\020\000\037\000\021\000\036\000\
\\022\000\035\000\023\000\034\000\024\000\033\000\025\000\032\000\
\\026\000\031\000\031\000\187\000\032\000\187\000\035\000\187\000\
\\036\000\187\000\038\000\187\000\039\000\187\000\043\000\187\000\
\\044\000\187\000\045\000\187\000\000\000\
\\001\000\001\000\188\000\005\000\188\000\007\000\188\000\009\000\188\000\
\\011\000\188\000\013\000\188\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\026\000\188\000\027\000\188\000\
\\031\000\188\000\032\000\188\000\035\000\188\000\036\000\188\000\
\\038\000\188\000\039\000\188\000\043\000\188\000\044\000\188\000\
\\045\000\188\000\000\000\
\\001\000\001\000\189\000\005\000\189\000\007\000\189\000\009\000\189\000\
\\011\000\189\000\013\000\189\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\026\000\189\000\027\000\189\000\
\\031\000\189\000\032\000\189\000\035\000\189\000\036\000\189\000\
\\038\000\189\000\039\000\189\000\043\000\189\000\044\000\189\000\
\\045\000\189\000\000\000\
\\001\000\001\000\190\000\005\000\190\000\007\000\190\000\009\000\190\000\
\\011\000\190\000\013\000\190\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\026\000\190\000\027\000\190\000\
\\031\000\190\000\032\000\190\000\035\000\190\000\036\000\190\000\
\\038\000\190\000\039\000\190\000\043\000\190\000\044\000\190\000\
\\045\000\190\000\000\000\
\\001\000\001\000\191\000\005\000\191\000\007\000\191\000\009\000\191\000\
\\011\000\191\000\013\000\191\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\026\000\191\000\027\000\191\000\
\\031\000\191\000\032\000\191\000\035\000\191\000\036\000\191\000\
\\038\000\191\000\039\000\191\000\043\000\191\000\044\000\191\000\
\\045\000\191\000\000\000\
\\001\000\001\000\192\000\005\000\192\000\007\000\192\000\009\000\192\000\
\\011\000\192\000\013\000\192\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\026\000\192\000\027\000\192\000\
\\031\000\192\000\032\000\192\000\035\000\192\000\036\000\192\000\
\\038\000\192\000\039\000\192\000\043\000\192\000\044\000\192\000\
\\045\000\192\000\000\000\
\\001\000\001\000\193\000\005\000\193\000\007\000\193\000\009\000\193\000\
\\011\000\193\000\013\000\193\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\026\000\193\000\027\000\193\000\
\\031\000\193\000\032\000\193\000\035\000\193\000\036\000\193\000\
\\038\000\193\000\039\000\193\000\043\000\193\000\044\000\193\000\
\\045\000\193\000\000\000\
\\001\000\001\000\196\000\005\000\196\000\007\000\196\000\009\000\196\000\
\\011\000\196\000\013\000\196\000\015\000\041\000\016\000\040\000\
\\018\000\039\000\019\000\038\000\020\000\037\000\021\000\036\000\
\\022\000\035\000\023\000\034\000\024\000\033\000\025\000\032\000\
\\026\000\031\000\027\000\030\000\031\000\196\000\035\000\196\000\
\\036\000\196\000\038\000\196\000\039\000\196\000\043\000\196\000\
\\044\000\196\000\045\000\196\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\009\000\056\000\016\000\024\000\030\000\023\000\033\000\022\000\
\\034\000\021\000\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\009\000\092\000\016\000\024\000\030\000\023\000\033\000\022\000\
\\034\000\021\000\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\016\000\024\000\030\000\023\000\033\000\022\000\034\000\021\000\
\\037\000\020\000\039\000\094\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\016\000\024\000\030\000\023\000\033\000\022\000\034\000\021\000\
\\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\050\000\000\000\
\\001\000\002\000\077\000\000\000\
\\001\000\002\000\078\000\000\000\
\\001\000\002\000\079\000\000\000\
\\001\000\002\000\085\000\000\000\
\\001\000\002\000\088\000\013\000\087\000\000\000\
\\001\000\002\000\115\000\012\000\114\000\029\000\113\000\000\000\
\\001\000\002\000\117\000\000\000\
\\001\000\002\000\120\000\000\000\
\\001\000\002\000\124\000\000\000\
\\001\000\002\000\140\000\000\000\
\\001\000\002\000\146\000\000\000\
\\001\000\002\000\150\000\000\000\
\\001\000\005\000\106\000\013\000\105\000\000\000\
\\001\000\005\000\133\000\009\000\132\000\000\000\
\\001\000\005\000\133\000\013\000\141\000\000\000\
\\001\000\006\000\097\000\028\000\096\000\000\000\
\\001\000\006\000\134\000\000\000\
\\001\000\006\000\144\000\020\000\143\000\000\000\
\\001\000\007\000\084\000\009\000\083\000\000\000\
\\001\000\007\000\084\000\039\000\111\000\000\000\
\\001\000\007\000\110\000\009\000\109\000\000\000\
\\001\000\008\000\098\000\000\000\
\\001\000\011\000\108\000\015\000\041\000\016\000\040\000\018\000\039\000\
\\019\000\038\000\020\000\037\000\021\000\036\000\022\000\035\000\
\\023\000\034\000\024\000\033\000\025\000\032\000\026\000\031\000\
\\027\000\030\000\000\000\
\\001\000\011\000\137\000\015\000\041\000\016\000\040\000\018\000\039\000\
\\019\000\038\000\020\000\037\000\021\000\036\000\022\000\035\000\
\\023\000\034\000\024\000\033\000\025\000\032\000\026\000\031\000\
\\027\000\030\000\000\000\
\\001\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\
\\031\000\082\000\000\000\
\\001\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\
\\035\000\121\000\000\000\
\\001\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\
\\036\000\081\000\000\000\
\\001\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\
\\036\000\147\000\000\000\
\\001\000\020\000\095\000\000\000\
\\001\000\020\000\107\000\000\000\
\\001\000\020\000\138\000\000\000\
\\001\000\020\000\152\000\000\000\
\\001\000\028\000\080\000\000\000\
\\001\000\028\000\131\000\000\000\
\\001\000\038\000\076\000\043\000\049\000\044\000\048\000\045\000\047\000\000\000\
\\001\000\040\000\129\000\000\000\
\\001\000\043\000\049\000\044\000\048\000\045\000\047\000\000\000\
\\155\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\156\000\000\000\
\\157\000\000\000\
\\158\000\000\000\
\\159\000\000\000\
\\160\000\000\000\
\\161\000\000\000\
\\162\000\000\000\
\\163\000\000\000\
\\164\000\000\000\
\\165\000\000\000\
\\166\000\000\000\
\\167\000\000\000\
\\168\000\000\000\
\\169\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\028\000\029\000\000\000\
\\173\000\000\000\
\\174\000\000\000\
\\175\000\000\000\
\\176\000\000\000\
\\177\000\000\000\
\\178\000\000\000\
\\179\000\000\000\
\\180\000\000\000\
\\181\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\182\000\018\000\039\000\019\000\038\000\000\000\
\\183\000\018\000\039\000\019\000\038\000\000\000\
\\184\000\000\000\
\\185\000\000\000\
\\194\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\195\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\197\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\198\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\199\000\000\000\
\\200\000\000\000\
\\201\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\202\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\203\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\204\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\205\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\206\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\207\000\000\000\
\\208\000\000\000\
\\209\000\000\000\
\\210\000\000\000\
\\211\000\000\000\
\\212\000\000\000\
\\213\000\000\000\
\\214\000\000\000\
\\215\000\000\000\
\\216\000\002\000\120\000\000\000\
\\217\000\000\000\
\\218\000\000\000\
\\219\000\000\000\
\\220\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\221\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\222\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\223\000\015\000\041\000\016\000\040\000\018\000\039\000\019\000\038\000\
\\020\000\037\000\021\000\036\000\022\000\035\000\023\000\034\000\
\\024\000\033\000\025\000\032\000\026\000\031\000\027\000\030\000\000\000\
\\224\000\000\000\
\\225\000\008\000\061\000\010\000\060\000\012\000\059\000\014\000\058\000\000\000\
\\225\000\010\000\104\000\014\000\058\000\000\000\
\\225\000\010\000\104\000\014\000\058\000\040\000\127\000\000\000\
\\226\000\000\000\
\\227\000\000\000\
\"
val actionRowNumbers =
"\013\000\055\000\058\000\054\000\
\\065\000\064\000\063\000\062\000\
\\061\000\060\000\059\000\057\000\
\\056\000\053\000\069\000\052\000\
\\067\000\066\000\051\000\014\000\
\\013\000\013\000\013\000\010\000\
\\070\000\071\000\113\000\013\000\
\\013\000\013\000\013\000\013\000\
\\013\000\013\000\013\000\013\000\
\\013\000\013\000\013\000\013\000\
\\099\000\098\000\097\000\095\000\
\\049\000\015\000\016\000\017\000\
\\047\000\041\000\039\000\074\000\
\\033\000\091\000\068\000\112\000\
\\018\000\019\000\013\000\011\000\
\\078\000\002\000\001\000\005\000\
\\007\000\006\000\008\000\004\000\
\\003\000\082\000\081\000\080\000\
\\079\000\096\000\012\000\043\000\
\\030\000\036\000\013\000\013\000\
\\013\000\075\000\013\000\114\000\
\\027\000\072\000\044\000\037\000\
\\035\000\093\000\076\000\034\000\
\\088\000\020\000\013\000\021\000\
\\104\000\040\000\085\000\009\000\
\\092\000\116\000\013\000\073\000\
\\023\000\013\000\115\000\077\000\
\\013\000\087\000\100\000\050\000\
\\104\000\101\000\108\000\048\000\
\\105\000\028\000\031\000\013\000\
\\013\000\038\000\045\000\089\000\
\\117\000\013\000\094\000\024\000\
\\029\000\013\000\032\000\022\000\
\\025\000\042\000\084\000\114\000\
\\013\000\083\000\103\000\102\000\
\\109\000\013\000\026\000\106\000\
\\107\000\013\000\090\000\110\000\
\\046\000\086\000\013\000\111\000\
\\000\000"
val gotoT =
"\
\\001\000\015\000\002\000\152\000\011\000\014\000\015\000\013\000\
\\016\000\012\000\017\000\011\000\018\000\010\000\019\000\009\000\
\\020\000\008\000\021\000\007\000\022\000\006\000\023\000\005\000\
\\024\000\004\000\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\044\000\004\000\043\000\005\000\042\000\006\000\041\000\
\\007\000\040\000\000\000\
\\000\000\
\\001\000\049\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\050\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\051\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\053\000\011\000\014\000\012\000\052\000\015\000\013\000\
\\016\000\012\000\017\000\011\000\018\000\010\000\019\000\009\000\
\\020\000\008\000\021\000\007\000\022\000\006\000\023\000\005\000\
\\024\000\004\000\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\028\000\055\000\000\000\
\\001\000\060\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\061\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\062\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\063\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\064\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\065\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\066\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\067\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\068\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\069\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\070\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\071\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\072\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\073\000\005\000\042\000\006\000\041\000\007\000\040\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\084\000\000\000\
\\001\000\087\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\089\000\011\000\014\000\013\000\088\000\015\000\013\000\
\\016\000\012\000\017\000\011\000\018\000\010\000\019\000\009\000\
\\020\000\008\000\021\000\007\000\022\000\006\000\023\000\005\000\
\\024\000\004\000\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\053\000\011\000\014\000\012\000\091\000\015\000\013\000\
\\016\000\012\000\017\000\011\000\018\000\010\000\019\000\009\000\
\\020\000\008\000\021\000\007\000\022\000\006\000\023\000\005\000\
\\024\000\004\000\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\097\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\098\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\099\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\001\000\100\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\028\000\101\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\110\000\000\000\
\\001\000\114\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\009\000\117\000\010\000\116\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\121\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\123\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\028\000\124\000\000\000\
\\000\000\
\\001\000\126\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\128\000\010\000\116\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\133\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\001\000\134\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\137\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\140\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\010\000\143\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\028\000\124\000\000\000\
\\001\000\146\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\147\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\149\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\151\000\011\000\014\000\015\000\013\000\016\000\012\000\
\\017\000\011\000\018\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\023\000\005\000\024\000\004\000\
\\025\000\003\000\026\000\002\000\027\000\001\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 153
val numrules = 73
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | lvaluetail of unit ->  (symbol list)
 | record of unit ->  (A.exp) | assignment of unit ->  (A.exp)
 | negexp of unit ->  (A.exp) | letstm of unit ->  (A.exp)
 | forstm of unit ->  (A.exp) | whilestm of unit ->  (A.exp)
 | ifthen of unit ->  (A.exp) | ifthenelse of unit ->  (A.exp)
 | arraystm of unit ->  (A.exp) | operation of unit ->  (A.exp)
 | functionstm of unit ->  (A.exp) | sequence of unit ->  (A.exp)
 | literal of unit ->  (A.exp)
 | typelist of unit ->  ( ( symbol * A.exp * pos )  list)
 | explistcomma of unit ->  (A.exp list)
 | explistsemi of unit ->  ( ( A.exp * pos )  list)
 | lvalue of unit ->  (A.var) | tyfield of unit ->  (A.field)
 | tyfields of unit ->  (A.field list) | ty of unit ->  (A.ty)
 | fundec of unit ->  (A.dec) | vardec of unit ->  (A.dec)
 | tydec of unit ->  (A.dec) | dec of unit ->  (A.dec)
 | decs of unit ->  (A.dec list) | program of unit ->  (A.exp)
 | exp of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 32) => true | (T 33) => true | (T 34) => true | (T 40) => true
 | (T 36) => true | (T 37) => true | (T 38) => true | (T 42) => true
 | (T 43) => true | (T 44) => true | (T 28) => true | (T 29) => true
 | (T 30) => true | (T 31) => true | (T 35) => true | (T 39) => true
 | (T 41) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 31))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "UMINUS"
  | (T 17) => "TIMES"
  | (T 18) => "DIVIDE"
  | (T 19) => "EQ"
  | (T 20) => "NEQ"
  | (T 21) => "LT"
  | (T 22) => "LE"
  | (T 23) => "GT"
  | (T 24) => "GE"
  | (T 25) => "AND"
  | (T 26) => "OR"
  | (T 27) => "ASSIGN"
  | (T 28) => "ARRAY"
  | (T 29) => "IF"
  | (T 30) => "THEN"
  | (T 31) => "ELSE"
  | (T 32) => "WHILE"
  | (T 33) => "FOR"
  | (T 34) => "TO"
  | (T 35) => "DO"
  | (T 36) => "LET"
  | (T 37) => "IN"
  | (T 38) => "END"
  | (T 39) => "OF"
  | (T 40) => "BREAK"
  | (T 41) => "NIL"
  | (T 42) => "FUNCTION"
  | (T 43) => "VAR"
  | (T 44) => "TYPE"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38)
 $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31)
 $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24)
 $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17)
 $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10)
 $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 1, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.literal literal1, literal1left, 
literal1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (literal as literal1) = literal1 ()
 in (literal)
end)
 in ( LrTable.NT 0, ( result, literal1left, literal1right), rest671)

end
|  ( 2, ( ( _, ( MlyValue.negexp negexp1, negexp1left, negexp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
negexp as negexp1) = negexp1 ()
 in (negexp)
end)
 in ( LrTable.NT 0, ( result, negexp1left, negexp1right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.record record1, record1left, record1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
record as record1) = record1 ()
 in (record)
end)
 in ( LrTable.NT 0, ( result, record1left, record1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.sequence sequence1, sequence1left, 
sequence1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (sequence as sequence1) = sequence1 ()
 in (sequence)
end)
 in ( LrTable.NT 0, ( result, sequence1left, sequence1right), rest671)

end
|  ( 5, ( ( _, ( MlyValue.functionstm functionstm1, functionstm1left, 
functionstm1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (functionstm as functionstm1) = functionstm1 ()
 in (functionstm)
end)
 in ( LrTable.NT 0, ( result, functionstm1left, functionstm1right), 
rest671)
end
|  ( 6, ( ( _, ( MlyValue.assignment assignment1, assignment1left, 
assignment1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (assignment as assignment1) = assignment1 ()
 in (assignment)
end)
 in ( LrTable.NT 0, ( result, assignment1left, assignment1right), 
rest671)
end
|  ( 7, ( ( _, ( MlyValue.operation operation1, operation1left, 
operation1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (operation as operation1) = operation1 ()
 in (operation)
end)
 in ( LrTable.NT 0, ( result, operation1left, operation1right), 
rest671)
end
|  ( 8, ( ( _, ( MlyValue.arraystm arraystm1, arraystm1left, 
arraystm1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (arraystm as arraystm1) = arraystm1 ()
 in (arraystm)
end)
 in ( LrTable.NT 0, ( result, arraystm1left, arraystm1right), rest671)

end
|  ( 9, ( ( _, ( MlyValue.ifthenelse ifthenelse1, ifthenelse1left, 
ifthenelse1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (ifthenelse as ifthenelse1) = ifthenelse1 ()
 in (ifthenelse)
end)
 in ( LrTable.NT 0, ( result, ifthenelse1left, ifthenelse1right), 
rest671)
end
|  ( 10, ( ( _, ( MlyValue.ifthen ifthen1, ifthen1left, ifthen1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
ifthen as ifthen1) = ifthen1 ()
 in (ifthen)
end)
 in ( LrTable.NT 0, ( result, ifthen1left, ifthen1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.whilestm whilestm1, whilestm1left, 
whilestm1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (whilestm as whilestm1) = whilestm1 ()
 in (whilestm)
end)
 in ( LrTable.NT 0, ( result, whilestm1left, whilestm1right), rest671)

end
|  ( 12, ( ( _, ( MlyValue.forstm forstm1, forstm1left, forstm1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
forstm as forstm1) = forstm1 ()
 in (forstm)
end)
 in ( LrTable.NT 0, ( result, forstm1left, forstm1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.letstm letstm1, letstm1left, letstm1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
letstm as letstm1) = letstm1 ()
 in (letstm)
end)
 in ( LrTable.NT 0, ( result, letstm1left, letstm1right), rest671)
end
|  ( 14, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => (
A.BreakExp(BREAKleft)))
 in ( LrTable.NT 0, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 15, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => (A.NilExp))
 in ( LrTable.NT 0, ( result, NIL1left, NIL1right), rest671)
end
|  ( 16, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => (nil))
 in ( LrTable.NT 0, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
lvalue as lvalue1) = lvalue1 ()
 in (lvalue)
end)
 in ( LrTable.NT 0, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left)
, STRING1right)) :: rest671)) => let val  result = MlyValue.literal
 (fn _ => let val  (STRING as STRING1) = STRING1 ()
 in (A.StringExp(STRING, STRINGleft))
end)
 in ( LrTable.NT 14, ( result, STRING1left, STRING1right), rest671)

end
|  ( 19, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.literal (fn _ => let val  (INT as INT1
) = INT1 ()
 in (A.IntExp(INT))
end)
 in ( LrTable.NT 14, ( result, INT1left, INT1right), rest671)
end
|  ( 20, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 ID1left, _)) :: rest671)) => let val  result = MlyValue.record (fn _
 => let val  (ID as ID1) = ID1 ()
 in (A.RecordExp{fields= nil, typ=symbol ID, pos=ID1left})
end)
 in ( LrTable.NT 26, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 21, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.typelist 
typelist1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: 
rest671)) => let val  result = MlyValue.record (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (typelist as typelist1) = typelist1 ()
 in (A.RecordExp{fields=typelist, typ= symbol ID, pos=ID1left})
end)
 in ( LrTable.NT 26, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
MINUS1left, _)) :: rest671)) => let val  result = MlyValue.negexp (fn
 _ => let val  (exp as exp1) = exp1 ()
 in (A.OpExp{left=A.IntExp(0),oper=A.MinusOp,right=exp,pos=MINUS1left}
)
end)
 in ( LrTable.NT 24, ( result, MINUS1left, exp1right), rest671)
end
|  ( 23, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.explistsemi 
explistsemi1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.sequence (fn _ => let val  (explistsemi as 
explistsemi1) = explistsemi1 ()
 in (A.SeqExp(explistsemi))
end)
 in ( LrTable.NT 15, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 24, ( ( _, ( _, _, RPAREN1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 ID1left, _)) :: rest671)) => let val  result = MlyValue.functionstm
 (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.CallExp{func=symbol ID,args=nil,pos=ID1left})
end)
 in ( LrTable.NT 16, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 25, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.explistcomma
 explistcomma1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) ::
 rest671)) => let val  result = MlyValue.functionstm (fn _ => let val 
 (ID as ID1) = ID1 ()
 val  (explistcomma as explistcomma1) = explistcomma1 ()
 in (A.CallExp{func=symbol ID,args=explistcomma,pos=ID1left})
end)
 in ( LrTable.NT 16, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, lvalue1left, _)) :: rest671)) => let val  
result = MlyValue.assignment (fn _ => let val  (lvalue as lvalue1) = 
lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.AssignExp{var=lvalue, exp=exp, pos=lvalue1left})
end)
 in ( LrTable.NT 25, ( result, lvalue1left, exp1right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.PlusOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.MinusOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.TimesOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.DivideOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp{test=exp1,then'=exp2,else'=SOME (A.IntExp(0)),pos=exp1left})

end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp{test=exp1,then'=A.IntExp(1),else'= SOME (exp2),pos=exp1left})

end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.EqOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.NeqOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.GeOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.LeOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.GtOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.operation (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1,oper=A.LtOp,right=exp2,pos=exp1left})
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _
)) :: rest671)) => let val  result = MlyValue.arraystm (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.ArrayExp{typ=symbol ID,size=exp1,init=exp2,pos=ID1left})
end)
 in ( LrTable.NT 18, ( result, ID1left, exp2right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, IF1left, _)) :: rest671)) => let val  result = 
MlyValue.ifthenelse (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (A.IfExp{test=exp1,then'=exp2,else'= SOME (exp3),pos=IF1left})
end
)
 in ( LrTable.NT 19, ( result, IF1left, exp3right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, IF1left, _)) :: rest671)) =>
 let val  result = MlyValue.ifthen (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.IfExp{test=exp1,then'=exp2,else'=NONE,pos=IF1left})
end)
 in ( LrTable.NT 20, ( result, IF1left, exp2right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, WHILE1left, _)) :: rest671)) =>
 let val  result = MlyValue.whilestm (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.WhileExp{test=exp1, body= exp2, pos= WHILE1left})
end)
 in ( LrTable.NT 21, ( result, WHILE1left, exp2right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, FOR1left, _)) :: 
rest671)) => let val  result = MlyValue.forstm (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.ForExp{var= symbol ID,escape= ref true,lo= exp1,hi= exp2,body= exp3,pos= FOR1left}
)
end)
 in ( LrTable.NT 22, ( result, FOR1left, exp3right), rest671)
end
|  ( 44, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.explistsemi 
explistsemi1, _, _)) :: _ :: ( _, ( MlyValue.decs decs1, _, _)) :: ( _
, ( _, LET1left, _)) :: rest671)) => let val  result = MlyValue.letstm
 (fn _ => let val  (decs as decs1) = decs1 ()
 val  (explistsemi as explistsemi1) = explistsemi1 ()
 in (A.LetExp{decs= decs, body=A.SeqExp(explistsemi), pos=LET1left})

end)
 in ( LrTable.NT 23, ( result, LET1left, END1right), rest671)
end
|  ( 45, ( ( _, ( _, _, END1right)) :: _ :: ( _, ( MlyValue.decs decs1
, _, _)) :: ( _, ( _, LET1left, _)) :: rest671)) => let val  result = 
MlyValue.letstm (fn _ => let val  (decs as decs1) = decs1 ()
 in (A.LetExp{decs= decs, body=A.SeqExp[], pos=LET1left})
end)
 in ( LrTable.NT 23, ( result, LET1left, END1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.typelist (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in ([(symbol ID, exp, ID1left)])
end)
 in ( LrTable.NT 13, ( result, ID1left, exp1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: _ :: ( _, ( MlyValue.typelist 
typelist1, typelist1left, _)) :: rest671)) => let val  result = 
MlyValue.typelist (fn _ => let val  (typelist as typelist1) = 
typelist1 ()
 val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (typelist @ [(symbol ID, exp, ID1left)])
end)
 in ( LrTable.NT 13, ( result, typelist1left, exp1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.explistsemi (fn _ => let
 val  (exp as exp1) = exp1 ()
 in ([(exp,expleft)])
end)
 in ( LrTable.NT 11, ( result, exp1left, exp1right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.exp exp1, expleft, exp1right)) :: _ :: ( _,
 ( MlyValue.explistsemi explistsemi1, explistsemi1left, _)) :: rest671
)) => let val  result = MlyValue.explistsemi (fn _ => let val  (
explistsemi as explistsemi1) = explistsemi1 ()
 val  (exp as exp1) = exp1 ()
 in (explistsemi @ [(exp,expleft)])
end)
 in ( LrTable.NT 11, ( result, explistsemi1left, exp1right), rest671)

end
|  ( 50, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.explistcomma (fn _ => let val  (exp
 as exp1) = exp1 ()
 in ([exp])
end)
 in ( LrTable.NT 12, ( result, exp1left, exp1right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.explistcomma explistcomma1, explistcomma1left, _)) :: rest671
)) => let val  result = MlyValue.explistcomma (fn _ => let val  (
explistcomma as explistcomma1) = explistcomma1 ()
 val  (exp as exp1) = exp1 ()
 in (explistcomma @ [exp])
end)
 in ( LrTable.NT 12, ( result, explistcomma1left, exp1right), rest671)

end
|  ( 52, ( ( _, ( MlyValue.dec dec1, dec1left, dec1right)) :: rest671)
) => let val  result = MlyValue.decs (fn _ => let val  (dec as dec1) =
 dec1 ()
 in ([dec])
end)
 in ( LrTable.NT 2, ( result, dec1left, dec1right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.dec dec1, _, dec1right)) :: ( _, ( 
MlyValue.decs decs1, decs1left, _)) :: rest671)) => let val  result = 
MlyValue.decs (fn _ => let val  (decs as decs1) = decs1 ()
 val  (dec as dec1) = dec1 ()
 in (decs @ [dec])
end)
 in ( LrTable.NT 2, ( result, decs1left, dec1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.tydec tydec1, tydec1left, tydec1right)) :: 
rest671)) => let val  result = MlyValue.dec (fn _ => let val  (tydec
 as tydec1) = tydec1 ()
 in (tydec)
end)
 in ( LrTable.NT 3, ( result, tydec1left, tydec1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.vardec vardec1, vardec1left, vardec1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  (
vardec as vardec1) = vardec1 ()
 in (vardec)
end)
 in ( LrTable.NT 3, ( result, vardec1left, vardec1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.fundec fundec1, fundec1left, fundec1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  (
fundec as fundec1) = fundec1 ()
 in (fundec)
end)
 in ( LrTable.NT 3, ( result, fundec1left, fundec1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, TYPE1left, _)) :: rest671)) =>
 let val  result = MlyValue.tydec (fn _ => let val  (ID as ID1) = ID1
 ()
 val  (ty as ty1) = ty1 ()
 in (A.TypeDec{name= symbol ID, ty= ty, pos= TYPE1left})
end)
 in ( LrTable.NT 4, ( result, TYPE1left, ty1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.ty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.NameTy(symbol ID,ID1left))
end)
 in ( LrTable.NT 7, ( result, ID1left, ID1right), rest671)
end
|  ( 59, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ty (fn _ => let val  (tyfields as tyfields1) =
 tyfields1 ()
 in (A.RecordTy(tyfields))
end)
 in ( LrTable.NT 7, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, (
ARRAYleft as ARRAY1left), _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.ArrayTy(symbol ID,ARRAYleft))
end)
 in ( LrTable.NT 7, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 61, ( rest671)) => let val  result = MlyValue.tyfields (fn _ => (
nil))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 62, ( ( _, ( MlyValue.tyfield tyfield1, tyfield1left, 
tyfield1right)) :: rest671)) => let val  result = MlyValue.tyfields
 (fn _ => let val  (tyfield as tyfield1) = tyfield1 ()
 in ([tyfield])
end)
 in ( LrTable.NT 8, ( result, tyfield1left, tyfield1right), rest671)

end
|  ( 63, ( ( _, ( MlyValue.tyfield tyfield1, _, tyfield1right)) :: _
 :: ( _, ( MlyValue.tyfields tyfields1, tyfields1left, _)) :: rest671)
) => let val  result = MlyValue.tyfields (fn _ => let val  (tyfields
 as tyfields1) = tyfields1 ()
 val  (tyfield as tyfield1) = tyfield1 ()
 in (tyfields @ [tyfield])
end)
 in ( LrTable.NT 8, ( result, tyfields1left, tyfield1right), rest671)

end
|  ( 64, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.tyfield (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in ({name=symbol ID1,escape=ref true,typ=symbol ID2,pos=ID1left})
end
)
 in ( LrTable.NT 9, ( result, ID1left, ID2right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, VAR1left, _)) :: rest671)) => let
 val  result = MlyValue.vardec (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec{name=symbol ID,escape=ref true, typ=NONE, init=exp,pos=VAR1left}
)
end)
 in ( LrTable.NT 5, ( result, VAR1left, exp1right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.vardec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec{name=symbol ID1,escape=ref true, typ=SOME (symbol ID1,ID1left), init=exp,pos=VARleft}
)
end)
 in ( LrTable.NT 5, ( result, VAR1left, exp1right), rest671)
end
|  ( 67, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.tyfields tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1,
 _, _)) :: ( _, ( _, FUNCTION1left, _)) :: rest671)) => let val  
result = MlyValue.fundec (fn _ => let val  (ID as ID1) = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  (exp as exp1) = exp1 ()
 in (
{name=symbol ID,params=tyfields,result=NONE,body=exp,pos=FUNCTION1left} : A.fundec
)
end)
 in ( LrTable.NT 6, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 68, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, 
FUNCTION1left, _)) :: rest671)) => let val  result = MlyValue.fundec
 (fn _ => let val  ID1 = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
{name=symbol ID1,params=tyfields,result=SOME (symbol ID2,ID2left),body=exp,pos=FUNCTION1left} : A.fundec
)
end)
 in ( LrTable.NT 6, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 69, ( ( _, ( MlyValue.lvaluetail lvaluetail1, _, lvaluetail1right
)) :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  
result = MlyValue.lvalue (fn _ => let val  ID1 = ID1 ()
 val  lvaluetail1 = lvaluetail1 ()
 in ()
end)
 in ( LrTable.NT 10, ( result, ID1left, lvaluetail1right), rest671)

end
|  ( 70, ( rest671)) => let val  result = MlyValue.lvaluetail (fn _ =>
 ())
 in ( LrTable.NT 27, ( result, defaultPos, defaultPos), rest671)
end
|  ( 71, ( ( _, ( MlyValue.lvaluetail lvaluetail1, _, lvaluetail1right
)) :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, DOT1left, _)) :: 
rest671)) => let val  result = MlyValue.lvaluetail (fn _ => let val  
ID1 = ID1 ()
 val  lvaluetail1 = lvaluetail1 ()
 in ()
end)
 in ( LrTable.NT 27, ( result, DOT1left, lvaluetail1right), rest671)

end
|  ( 72, ( ( _, ( MlyValue.lvaluetail lvaluetail1, _, lvaluetail1right
)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, LBRACK1left,
 _)) :: rest671)) => let val  result = MlyValue.lvaluetail (fn _ =>
 let val  exp1 = exp1 ()
 val  lvaluetail1 = lvaluetail1 ()
 in ()
end)
 in ( LrTable.NT 27, ( result, LBRACK1left, lvaluetail1right), rest671
)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
end
end
