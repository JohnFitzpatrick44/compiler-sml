%%
%term
    EOF 
  | ID of string
  | INT of int 
  | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS| TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program | decs | dec | tydec | vardec | fundec | ty | tyfields | tyfield | lvalue | explistsemi | explistcomma | intexp | typelist| literal| sequence | functionstm | operation |arraystm | ifthenelse | ifthen | whilestm | forstm | letstm  | op | negexp | assignment | record | lvaluetail


%pos int

%nonassoc WHILE DO OF
%nonassoc IF THEN ELSE
%nonassoc LET IN
%nonassoc FUNCTION
%nonassoc ASSIGN
%nonassoc OR
%nonassoc AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%right LBRACK
%right LPAREN
%left RPAREN

%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp			()

	
exp: literal ()
  | negexp ()
  | record ()
  | sequence ()
  | functionstm ()
  | assignment ()
  | operation ()
  | arraystm ()
  | ifthenelse ()
  | ifthen ()
  | whilestm ()
  | forstm ()
  | letstm ()
  | BREAK ()
  | NIL ()
  | LPAREN RPAREN     ()
  | lvalue  ()


literal: STRING ()
| INT ()

record: ID LBRACE RBRACE                ()
  | ID LBRACE typelist RBRACE       ()

negexp: MINUS exp %prec UMINUS ()

sequence:  LPAREN explistsemi RPAREN  ()

functionstm: ID LPAREN RPAREN  ()
  | ID LPAREN explistcomma RPAREN   ()

assignment:  lvalue ASSIGN exp ()

operation: exp PLUS exp()
  |  exp MINUS  exp     ()
  |  exp TIMES  exp     ()
  |  exp DIVIDE   exp   ()
  |  exp AND  exp  ()
  |  exp OR   exp  ()
  |  exp  EQ  exp  ()
  |  exp NEQ  exp   ()
  |  exp GE   exp   ()
  |  exp LE   exp    ()
  |  exp GT   exp    ()
  |  exp LT   exp    ()


arraystm: ID LBRACK exp RBRACK OF exp ()


ifthenelse: IF exp THEN exp ELSE exp ()


ifthen : IF exp THEN exp ()

whilestm: WHILE exp DO exp ()

forstm: FOR ID ASSIGN exp TO exp DO exp ()

letstm  : LET decs IN explistsemi END ()
  | LET decs IN END         ()


       


typelist: ID EQ exp ()
        | typelist COMMA ID EQ exp ()

explistsemi: exp  ()
      | explistsemi SEMICOLON exp  ()

explistcomma: exp  ()
      | explistcomma SEMICOLON exp  ()

decs: dec ()
    | decs dec ()

dec: tydec ()
   | vardec ()
   | fundec ()

    
tydec: TYPE ID EQ ty  ()

ty: ID    ()
  | LBRACE tyfields RBRACE ()
  | ARRAY OF ID ()

tyfields: (* empty *) ()
        | tyfield ()
        | tyfields COMMA tyfield ()

tyfield: ID COLON ID ()

vardec: VAR ID ASSIGN exp   ()
      | VAR ID COLON ID ASSIGN exp      ()

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp       ()
      | FUNCTION ID LPAREN tyfields RPAREN ASSIGN EQ exp ()

lvalue: ID lvaluetail   ()
lvaluetail: ()
          | DOT ID ()
          |LBRACK exp RBRACK ()












