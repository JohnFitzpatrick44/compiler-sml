structure A = Absyn
open Symbol

datatype varElement = fieldElement of Symbol.symbol * A.pos
                  |   subscriptElement of A.exp * A.pos

fun stitchDecListHelper (a, []) = [a]
| stitchDecListHelper (A.FunctionDec [a], head::l) = 
              (case head of 
              A.FunctionDec [x] =>  (A.FunctionDec([x]@[a]))::l
              | _ => (A.FunctionDec([a]))::head::l
              )
| stitchDecListHelper  (A.TypeDec [a], head::l) = 
  (case head of 
              A.TypeDec [x] =>  (A.TypeDec([x]@[a]))::l
              | _ => (A.TypeDec([a]))::head::l
              )
  | stitchDecListHelper  (A.VarDec a, l) = (A.VarDec(a))::l

fun stitchDecList l = foldr stitchDecListHelper [] l
fun createVar (current,result) = 
              case current of 
              fieldElement (s,p) => A.FieldVar(result,s,p)
            | subscriptElement (e,p) => A.SubscriptVar(result,e,p)

%%
%term
    EOF 
  | ID of string
  | INT of int 
  | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS| TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp of A.exp
  | program of A.exp 
  | decs  of A.dec list
  | dec of A.dec
  | tydec of A.dec
  | vardec of A.dec
  | fundec of A.fundec
  | ty of A.ty
  | tyfields of A.field list
  | tyfield of A.field
  | lvalue of A.var
  | explistsemi of (A.exp * pos) list
  | explistcomma of A.exp list
  | typelist of (symbol * A.exp * pos) list
  | literal of A.exp
  | sequence of A.exp 
  | functionstm of A.exp
  | operation of A.exp
  | arraystm of A.exp
  | ifthenelse of A.exp
  | ifthen of A.exp
  | whilestm of A.exp
  | forstm of A.exp
  | letstm  of A.exp
  | negexp of A.exp
  | assignment of A.exp
  | record of A.exp
  | lvaluetail of varElement list 



%pos int

%nonassoc DO 
%nonassoc OF
%nonassoc THEN 
%right ELSE 
%right ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp			(exp)

	
exp: literal (literal)
  | negexp (negexp)
  | record (record)
  | sequence (sequence)
  | functionstm (functionstm)
  | assignment (assignment)
  | operation (operation)
  | arraystm (arraystm)
  | ifthenelse (ifthenelse)
  | ifthen (ifthen)
  | whilestm (whilestm)
  | forstm (forstm)
  | letstm (letstm)
  | BREAK (A.BreakExp(BREAKleft))
  | NIL         (A.NilExp)
  | LPAREN RPAREN     (A.SeqExp([]))
  | lvalue  (A.VarExp(lvalue))


literal: STRING (A.StringExp(STRING, STRINGleft))
| INT (A.IntExp(INT))

record: ID LBRACE RBRACE                (A.RecordExp{fields= nil, typ=symbol ID, pos=ID1left})
  | ID LBRACE typelist RBRACE       (A.RecordExp{fields=typelist, typ= symbol ID, pos=ID1left})

negexp: MINUS exp %prec UMINUS (A.OpExp{left=A.IntExp(0),oper=A.MinusOp,right=exp,pos=MINUS1left})

sequence:  LPAREN explistsemi RPAREN  (A.SeqExp(explistsemi))

functionstm: ID LPAREN RPAREN  (A.CallExp{func=symbol ID,args=nil,pos=ID1left})
  | ID LPAREN explistcomma RPAREN   (A.CallExp{func=symbol ID,args=explistcomma,pos=ID1left})

assignment:  lvalue ASSIGN exp (A.AssignExp{var=lvalue, exp=exp, pos=lvalue1left})

operation: exp PLUS exp(A.OpExp{left=exp1,oper=A.PlusOp,right=exp2,pos=exp1left})
  |  exp MINUS  exp     (A.OpExp{left=exp1,oper=A.MinusOp,right=exp2,pos=exp1left})
  |  exp TIMES  exp     (A.OpExp{left=exp1,oper=A.TimesOp,right=exp2,pos=exp1left})
  |  exp DIVIDE   exp   (A.OpExp{left=exp1,oper=A.DivideOp,right=exp2,pos=exp1left})

  |  exp AND  exp  (A.IfExp{test=exp1,then'=exp2,else'=SOME (A.IntExp(0)),pos=exp1left})
  |  exp OR   exp  (A.IfExp{test=exp1,then'=A.IntExp(1),else'= SOME (exp2),pos=exp1left})

  |  exp  EQ  exp  (A.OpExp{left=exp1,oper=A.EqOp,right=exp2,pos=exp1left})
  |  exp NEQ  exp   (A.OpExp{left=exp1,oper=A.NeqOp,right=exp2,pos=exp1left})
  |  exp GE   exp   (A.OpExp{left=exp1,oper=A.GeOp,right=exp2,pos=exp1left})
  |  exp LE   exp    (A.OpExp{left=exp1,oper=A.LeOp,right=exp2,pos=exp1left})
  |  exp GT   exp    (A.OpExp{left=exp1,oper=A.GtOp,right=exp2,pos=exp1left})
  |  exp LT   exp    (A.OpExp{left=exp1,oper=A.LtOp,right=exp2,pos=exp1left})



arraystm: ID LBRACK exp RBRACK OF exp (A.ArrayExp{typ=symbol ID,size=exp1,init=exp2,pos=ID1left})


ifthenelse: IF exp THEN exp ELSE exp (A.IfExp{test=exp1,then'=exp2,else'= SOME (exp3),pos=IF1left})


ifthen : IF exp THEN exp (A.IfExp{test=exp1,then'=exp2,else'=NONE,pos=IF1left})

whilestm: WHILE exp DO exp (A.WhileExp{test=exp1, body= exp2, pos= WHILE1left})

forstm: FOR ID ASSIGN exp TO exp DO exp (A.ForExp{var= symbol ID,escape= ref true,lo= exp1,hi= exp2,body= exp3,pos= FOR1left})

letstm  : LET decs IN explistsemi END (A.LetExp{decs= stitchDecList decs, body=A.SeqExp(explistsemi), pos=LET1left})
  | LET decs IN END         (A.LetExp{decs= stitchDecList decs, body=A.SeqExp[], pos=LET1left})


       


typelist: ID EQ exp ([(symbol ID, exp, ID1left)])
        | typelist COMMA ID EQ exp (typelist @ [(symbol ID, exp, ID1left)])

explistsemi: exp  ([(exp,expleft)])
      | explistsemi SEMICOLON exp  (explistsemi @ [(exp,expleft)])

explistcomma: exp  ([exp])
      | explistcomma COMMA exp  (explistcomma @ [exp])

decs: dec ([dec])
    | decs dec (decs @ [dec])

dec: tydec (tydec)
   | vardec (vardec)
   | fundec (A.FunctionDec([fundec]))

(* ASK HILTON *)    
tydec: TYPE ID EQ ty  (A.TypeDec([{name= symbol ID, ty= ty, pos= TYPEleft}]))

ty: ID    (A.NameTy(symbol ID,ID1left))
  | LBRACE tyfields RBRACE (A.RecordTy(tyfields))
  | ARRAY OF ID (A.ArrayTy(symbol ID,ARRAYleft))

tyfields: (* empty *) (nil)
        | tyfield ([tyfield])
        | tyfields COMMA tyfield (tyfields @ [tyfield])

tyfield: ID COLON ID ({name=symbol ID1,escape=ref true,typ=symbol ID2,pos=ID1left}) 

vardec: VAR ID ASSIGN exp   (A.VarDec{name=symbol ID,escape=ref true, typ=NONE, init=exp,pos=VAR1left})
      | VAR ID COLON ID ASSIGN exp      (A.VarDec{name=symbol ID1,escape=ref true, typ=SOME (symbol ID2,ID2left), init=exp,pos=VARleft})

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp             ({name=symbol ID,params=tyfields,result=NONE,body=exp,pos=FUNCTION1left} : A.fundec)

      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp    ({name=symbol ID1,params=tyfields,result=SOME (symbol ID2,ID2left),body=exp,pos=FUNCTION1left} : A.fundec)

lvalue: ID lvaluetail   (foldl createVar (A.SimpleVar(symbol ID,ID1left)) lvaluetail)
lvaluetail:                   ([])
          | DOT ID lvaluetail (fieldElement(symbol ID, ID1left)::lvaluetail)
          |LBRACK exp RBRACK lvaluetail (subscriptElement(exp,exp1left)::lvaluetail)












